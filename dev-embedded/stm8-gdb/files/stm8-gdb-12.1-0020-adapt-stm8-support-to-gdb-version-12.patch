Index: gdb-12.1/gdb/stm8-tdep.c
===================================================================
--- gdb-12.1.orig/gdb/stm8-tdep.c	2023-04-27 13:21:38.577432435 +0200
+++ gdb-12.1/gdb/stm8-tdep.c	2023-04-30 15:50:07.095014231 +0200
@@ -4,6 +4,9 @@
 
    Copyright (C) 1996-2018 Free Software Foundation, Inc.
 
+   updated by Christian Schoffit for GDB version 12
+   Copyright (C) 2023
+
    This file is part of GDB.
 
    This program is free software; you can redistribute it and/or modify
@@ -35,6 +38,9 @@
 #include "objfiles.h"
 #include "target-descriptions.h"
 #include "dwarf2/frame.h"
+#include "features/stm8.c"
+#include "gdbsupport/gdb_assert.h"
+
 
 enum stm8_regnum
 {
@@ -68,7 +74,7 @@
 
 #define STM8_NUM_REGS ARRAY_SIZE (stm8_register_names)
 
-struct gdbarch_tdep
+struct stm8_gdbarch_tdep : gdbarch_tdep
 {
   enum stm8_producer producer;
   /* Type for void.  */
@@ -89,8 +95,6 @@
 stm8_convert_register_p (struct gdbarch *gdbarch, int regnum,
 		struct type *type)
 {
-	struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);
-
 	if ((regnum == STM8_SP_REGNUM) && (TYPE_LENGTH(type) > 2))
 	{
 		return 1;
@@ -115,45 +119,52 @@
 		struct type *type, gdb_byte *to,
 		int *optimizedp, int *unavailablep)
 {
-	/* Convert to TYPE.  */
+  struct gdbarch *gdbarch = get_frame_arch (frame);
+  /* Convert to TYPE.  */
 
-	memset(to,0,TYPE_LENGTH(type));
+  memset(to,0,TYPE_LENGTH(type));
 
-	if (!get_frame_register_bytes (frame, regnum, 0, 2,
-			to+TYPE_LENGTH(type)-2, optimizedp, unavailablep))
-		return 0;
+  if (stm8_debug)
+	fprintf_unfiltered (gdb_stdlog, "stm8_register_to_value: size of register %d is %d\n",
+		regnum, register_size (gdbarch, regnum));
+
+  if (!get_frame_register_bytes (frame, regnum, 0,
+				 gdb::make_array_view (to,
+						register_size (gdbarch,
+							       regnum)),
+				 optimizedp, unavailablep))
+    return 0;
 
-	*optimizedp = *unavailablep = 0;
-	return 1;
+  *optimizedp = *unavailablep = 0;
+  return 1;
 }
 
 static stm8_producer
 stm8_get_producer()
 {
-  struct objfile *objfile;
-  struct compunit_symtab *cust;
-
   if (current_program_space != NULL)
   {
-    ALL_COMPUNITS(objfile, cust)
-    {
-      if (cust
-        && COMPUNIT_PRODUCER (cust) != NULL
-        && startswith (COMPUNIT_PRODUCER (cust), "SDCC"))
+    for (struct objfile *objfile : current_program_space->objfiles())
+      for (struct compunit_symtab *cust : objfile->compunits())
       {
-        return SDCC_PRODUCER;
+        if (cust
+          && cust->producer() != NULL
+          && startswith (cust->producer(), "SDCC"))
+        {
+          return SDCC_PRODUCER;
+        }
       }
-    }
   }
   return GCC_PRODUCER;
 }
 
 static void
-stm8_initialize_soft_register_info(struct gdbarch_tdep *tdep)
+stm8_initialize_soft_register_info(struct stm8_gdbarch_tdep *tdep)
 {
   tdep->producer = stm8_get_producer();
 }
 
+#if 0
 static const char *
 stm8_register_name (struct gdbarch *gdbarch, int regnum)
 {
@@ -176,12 +187,32 @@
 	}
 	return NULL;
 }
+#else
+static const char *
+stm8_pseudo_register_name (struct gdbarch *gdbarch, int regnum)
+{
+	if (stm8_get_producer() == SDCC_PRODUCER)
+	{
+		switch (regnum)
+		{
+			case STM8_XH_REGNUM :
+				return "xh";
+			case STM8_XL_REGNUM :
+				return "xl";
+			case STM8_YH_REGNUM :
+				return "yh";
+			case STM8_YL_REGNUM :
+				return "yl";
+		}
+	}
+	return NULL;
+}
+#endif
 
+#if 0
 static struct type *
 stm8_register_type (struct gdbarch *gdbarch, int regnum)
 {
-	struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);
-
 	switch (regnum)
 	{
 	case STM8_PC_REGNUM:
@@ -195,22 +226,26 @@
 		return builtin_type (gdbarch)->builtin_uint8;
 	}
 }
+#else
+static struct type *
+stm8_pseudo_register_type (struct gdbarch *gdbarch, int regnum)
+{
+	return builtin_type (gdbarch)->builtin_uint8;
+}
+#endif
 
 static enum register_status
-stm8_pseudo_register_read (struct gdbarch *gdbarch, struct regcache *regcache,
+stm8_pseudo_register_read (struct gdbarch *gdbarch, struct readable_regcache *regcache,
 		int regnum, gdb_byte *buf)
 {
 	enum register_status status;
-	struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);
-	enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);
-	int regsize = 2;
 	gdb_byte tmp[4];
 
 
 	switch (regnum)
 	{
 	case STM8_XH_REGNUM:
-		status = regcache_raw_read(regcache, STM8_X_REGNUM, tmp);
+		status = regcache->raw_read(STM8_X_REGNUM, tmp);
 		if (status == REG_VALID)
 		{
 			buf[0] = tmp[0];
@@ -218,7 +253,7 @@
 		return status;
 
 	case STM8_XL_REGNUM:
-		status = regcache_raw_read(regcache, STM8_X_REGNUM, tmp);
+		status = regcache->raw_read(STM8_X_REGNUM, tmp);
 		if (status == REG_VALID)
 		{
 			buf[0] = tmp[1];
@@ -226,7 +261,7 @@
 		return status;
 
 	case STM8_YH_REGNUM:
-		status = regcache_raw_read(regcache, STM8_Y_REGNUM, tmp);
+		status = regcache->raw_read(STM8_Y_REGNUM, tmp);
 		if (status == REG_VALID)
 		{
 			buf[0] = tmp[0];
@@ -234,7 +269,7 @@
 		return status;
 
 	case STM8_YL_REGNUM:
-		status = regcache_raw_read(regcache, STM8_Y_REGNUM, tmp);
+		status = regcache->raw_read(STM8_Y_REGNUM, tmp);
 		if (status == REG_VALID)
 		{
 			buf[0] = tmp[1];
@@ -252,47 +287,44 @@
 		int regnum, const gdb_byte *buf)
 {
 	enum register_status status;
-	enum bfd_endian byte_order = gdbarch_byte_order (target_gdbarch ());
-	struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);
-	const int regsize = 2;
 	gdb_byte tmp[4];
 
 	switch (regnum)
 	{
 
 	case STM8_XH_REGNUM:
-		status = regcache_raw_read(regcache, STM8_X_REGNUM, tmp);
+		status = regcache->raw_read( STM8_X_REGNUM, tmp);
 		if (status == REG_VALID)
 		{
 		  tmp[0] = buf[0];
-		  regcache_raw_write (regcache, STM8_X_REGNUM, tmp);
+		  regcache->raw_write( STM8_X_REGNUM, tmp);
 	  }
 	  return;
 
 	case STM8_XL_REGNUM:
-		status = regcache_raw_read(regcache, STM8_X_REGNUM, tmp);
+		status = regcache->raw_read( STM8_X_REGNUM, tmp);
 		if (status == REG_VALID)
 		{
 		  tmp[1] = buf[0];
-		  regcache_raw_write (regcache, STM8_X_REGNUM, tmp);
+		  regcache->raw_write( STM8_X_REGNUM, tmp);
 	  }
 	  return;
 
 	case STM8_YH_REGNUM:
-		status = regcache_raw_read(regcache, STM8_Y_REGNUM, tmp);
+		status = regcache->raw_read( STM8_Y_REGNUM, tmp);
 		if (status == REG_VALID)
 		{
 		  tmp[0] = buf[0];
-		  regcache_raw_write (regcache, STM8_Y_REGNUM, tmp);
+		  regcache->raw_write( STM8_Y_REGNUM, tmp);
 	  }
 	  return;
 
 	case STM8_YL_REGNUM:
-		status = regcache_raw_read(regcache, STM8_Y_REGNUM, tmp);
+		status = regcache->raw_read( STM8_Y_REGNUM, tmp);
 		if (status == REG_VALID)
 		{
 		  tmp[1] = buf[0];
-		  regcache_raw_write (regcache, STM8_Y_REGNUM, tmp);
+		  regcache->raw_write( STM8_Y_REGNUM, tmp);
 	  }
 	  return;
 
@@ -359,7 +391,6 @@
 	if (stm8_debug)
 		fprintf_unfiltered (gdb_stdlog, "stm8_sw_breakpoint_from_kind called\n");
 
-	enum bfd_endian byte_order_for_code = gdbarch_byte_order_for_code (gdbarch);
 
 	static gdb_byte stm8_breakpoint[] = { 0x8b };
 
@@ -396,7 +427,6 @@
 {
   int ret = -1;
 
-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);
   static int * t;
 
   if (stm8_get_producer() == SDCC_PRODUCER)
@@ -419,31 +449,82 @@
   return ret;
 }
 
-static void
-stm8_write_pc (struct regcache *regcache, CORE_ADDR pc)
-{
-	if (stm8_debug)
-		fprintf_unfiltered (gdb_stdlog, "stm8_write_pc called\n");
-	regcache_cooked_write_unsigned (regcache, STM8_PC_REGNUM, pc);
-}
+static enum insn_return_kind
+stm8_get_return_insn (CORE_ADDR pc);
 
 static CORE_ADDR
 stm8_unwind_pc (struct gdbarch *gdbarch, struct frame_info *next_frame)
 {
-	gdb_byte buf[4];
 	CORE_ADDR pc;
+	CORE_ADDR addr_in_block;
+	struct frame_info *next_next;
+#if 0
+	int size = 2; /* Size of return address on stack */
+#endif
+
+	pc = default_unwind_pc (gdbarch, next_frame);
+
+	if (stm8_debug) {
+		fprintf_unfiltered (gdb_stdlog, "stm8_unwind_pc called\n");
+
+		if (get_frame_type(next_frame) != SENTINEL_FRAME) {
+			next_next = get_next_frame_sentinel_okay (next_frame);
+			gdb_assert (next_next != NULL);
+			addr_in_block = default_unwind_pc (gdbarch, next_next);
+
+			if ((addr_in_block & 0xFFFF0000) != 0) {
+				/* The address sits on the 2 higher bytes */
+				addr_in_block >>= 16;
+			}
+
+			while (get_frame_type (next_next) == INLINE_FRAME)
+			    next_next = get_next_frame_sentinel_okay (next_next);
+
+			if ((get_frame_type (next_next) == NORMAL_FRAME
+			       || get_frame_type (next_next) == TAILCALL_FRAME)
+			      && (get_frame_type (next_frame) == NORMAL_FRAME
+			  || get_frame_type (next_frame) == TAILCALL_FRAME
+			  || get_frame_type (next_frame) == INLINE_FRAME))
+				addr_in_block--;
+
+			if (stm8_debug)
+				fprintf_unfiltered (gdb_stdlog, "stm8_unwind_pc: func=%08lX\n", addr_in_block);
+
+#if 0
+			switch (stm8_get_return_insn (addr_in_block)) {
+			case RETURN_RET:
+				size = 2;
+				break;
+			case RETURN_RETF:
+				size = 3;
+				break;
+			case RETURN_IRET:
+				size = 3;
+				break;
+			}
+#endif
+		}
+	}
+
+	if ((pc & 0xFFFF0000) != 0) {
+		/* The address sits on the 2 higher bytes */
+		pc >>= 16;
+	}
 
-	struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);
-	frame_unwind_register (next_frame, STM8_PC_REGNUM, buf);
-	if (frame_relative_level(next_frame) < 0)
-		pc = extract_typed_address (buf, builtin_type (gdbarch)->builtin_func_ptr);
-	else
-		pc = extract_typed_address (buf, tdep->pc_type);
 	if (stm8_debug)
-		fprintf_unfiltered (gdb_stdlog, "stm8_unwind_pc called: pc=%8.8lx\n", (unsigned long)pc);
+		fprintf_unfiltered (gdb_stdlog, "stm8_unwind_pc: pc=%8.8lx\n", (unsigned long)pc);
 	return pc;
 }
 
+#if 0
+static void
+stm8_write_pc (struct regcache *regcache, CORE_ADDR pc)
+{
+	if (stm8_debug)
+		fprintf_unfiltered (gdb_stdlog, "stm8_write_pc called with pc=%04lX\n", pc);
+	regcache_cooked_write_unsigned (regcache, STM8_PC_REGNUM, pc);
+}
+
 static CORE_ADDR
 stm8_unwind_sp (struct gdbarch *gdbarch, struct frame_info *next_frame)
 {
@@ -455,7 +536,7 @@
 		fprintf_unfiltered (gdb_stdlog, "stm8_unwind_sp called: sp=%8.8lx\n", (unsigned long)sp);
 	return sp;
 }
-
+#endif
 
 /* Allocate and initialize a frame cache.  */
 
@@ -481,7 +562,10 @@
 stm8_get_return_insn (CORE_ADDR pc)
 {
 	const char *name;
-	CORE_ADDR func_addr, func_end, stop;
+	CORE_ADDR func_addr, func_end;
+
+	if (stm8_debug)
+		fprintf_unfiltered(gdb_stdlog, "stm8_get_return_insn: pc = %ld\n", pc);
 
 	if (find_pc_partial_function (pc, &name, &func_addr, &func_end))
 	{
@@ -683,89 +767,108 @@
  */
 
 static struct stm8_frame_cache *
-stm8_frame_cache (struct frame_info *next_frame, void **this_cache)
+stm8_frame_cache (struct frame_info *this_frame, void **this_cache)
 {
 	if (stm8_debug)
-		fprintf_unfiltered (gdb_stdlog, "stm8_frame_cache called (next_frame=%p)\n", next_frame);
+		fprintf_unfiltered (gdb_stdlog, "stm8_frame_cache called (this_frame=%p)\n", this_frame);
 
 	struct stm8_frame_cache *cache;
-	struct gdbarch *gdbarch = get_frame_arch (next_frame);
+	struct gdbarch *gdbarch = get_frame_arch (this_frame);
 	CORE_ADDR start_pc, current_pc, current_sp;
 	int retsize;
 
+	if (stm8_debug)
+		fprintf_unfiltered (gdb_stdlog, "this_frame level: %d\n", frame_relative_level (this_frame));
+
 	if (*this_cache)
 		return (struct stm8_frame_cache *) *this_cache;
 
 	cache = stm8_alloc_frame_cache ();
 	*this_cache = cache;
 
-	cache->saved_regs = trad_frame_alloc_saved_regs (next_frame);
+	cache->saved_regs = trad_frame_alloc_saved_regs (this_frame);
+
+	start_pc = get_frame_func (this_frame);
+	if (stm8_debug)
+		fprintf_unfiltered (gdb_stdlog, "stm8_frame_cache: frame func address: %04lX\n", start_pc);
+
+	if (start_pc) {
+		cache->return_kind = stm8_get_return_insn (start_pc);
 
-	start_pc = get_frame_func (next_frame);
+		current_pc = get_frame_pc (this_frame);
 
-	cache->return_kind = stm8_get_return_insn (start_pc);
+		if (stm8_debug)
+			fprintf_unfiltered (gdb_stdlog, "stm8_frame_cache: current_pc=%04lX\n", current_pc);
+
+		gdb_assert((current_pc & 0xFF000000) == 0);
+
+		current_sp = get_frame_sp (this_frame);
+		if (stm8_debug)
+			fprintf_unfiltered (gdb_stdlog, "stm8_frame_cache: current_sp=%04lX\n", current_sp);
 
-	current_pc = get_frame_pc (next_frame);
-	current_sp = get_frame_sp (next_frame);
 
-	/* Analyze the function prologue.  */
-	if (start_pc != 0)
+		/* Analyze the function prologue.  */
 		stm8_analyze_prologue (gdbarch, start_pc, current_pc,
 				(struct stm8_frame_cache *) *this_cache);
 
-	switch (cache->return_kind)
-	{
-	default:
-	case RETURN_RET:
-		retsize = 2;
-		break;
-	case RETURN_RETF:
-		retsize = 3;
-		break;
-	case RETURN_IRET:
-		retsize = 9;
-		break;
-	}
+		switch (cache->return_kind)
+		{
+		default:
+		case RETURN_RET:
+			retsize = 2;
+			break;
+		case RETURN_RETF:
+			retsize = 3;
+			break;
+		case RETURN_IRET:
+			retsize = 9;
+			break;
+		}
 
-	cache->base = current_sp;
-	if (cache->return_kind == RETURN_IRET)
-		cache->saved_regs[STM8_PC_REGNUM].addr = cache->base + 1 + 6;
-	else
-		cache->saved_regs[STM8_PC_REGNUM].addr = cache->base + 1;
-	trad_frame_set_value (cache->saved_regs,
-			STM8_SP_REGNUM,
-			cache->base+retsize);
+		cache->base = current_sp;
+		if (cache->return_kind == RETURN_IRET)
+			cache->saved_regs[STM8_PC_REGNUM].set_addr ( cache->base + 1 + 6 );
+		else
+			cache->saved_regs[STM8_PC_REGNUM].set_addr ( cache->base + 1 );
+		cache->saved_regs[STM8_SP_REGNUM].set_addr( cache->base+retsize );
 
-	if (stm8_debug)
-	{
-		fprintf_unfiltered (gdb_stdlog, "stm8_frame_cache: (next_frame=%p) base=%4.4lx curr_pc=%4.4lx curr_sp=%4.4lx framesize=%4.4x stackadj=%4.4x retsize=%d\n",
-				next_frame, (unsigned long)cache->base, (unsigned long)current_pc, (unsigned long)current_sp, cache->framesize, cache->stackadj, retsize);
 
-		CORE_ADDR frame_pc;
-		CORE_ADDR frame_sp;
-		frame_pc = value_as_long(trad_frame_get_prev_register (next_frame, cache->saved_regs, STM8_PC_REGNUM));
-		frame_sp =  value_as_long(trad_frame_get_prev_register (next_frame, cache->saved_regs, STM8_SP_REGNUM));
-
-		frame_pc = frame_pc >> 16;
-		fprintf_unfiltered (gdb_stdlog, "stm8_frame_cache: (next_frame=%p) pc=%8.8lx *pc=%8.8lx\n", next_frame, (unsigned long)cache->saved_regs[STM8_PC_REGNUM].addr, (unsigned long)frame_pc);
-		fprintf_unfiltered (gdb_stdlog, "stm8_frame_cache: (next_frame=%p) sp=%8.8lx *sp=%8.8lx\n", next_frame, (unsigned long)cache->saved_regs[STM8_SP_REGNUM].addr, (unsigned long)frame_sp);
-	}
+		if (stm8_debug)
+			{
+			fprintf_unfiltered (gdb_stdlog, "stm8_frame_cache: (this_frame=%p) base=%4.4lx curr_pc=%4.4lx curr_sp=%4.4lx framesize=%4.4x stackadj=%4.4x retsize=%d\n",
+					this_frame, (unsigned long)cache->base, (unsigned long)current_pc, (unsigned long)current_sp, cache->framesize, cache->stackadj, retsize);
 
+			CORE_ADDR frame_pc;
+			CORE_ADDR frame_sp;
+			frame_pc = value_as_long(trad_frame_get_prev_register (this_frame, cache->saved_regs, STM8_PC_REGNUM));
+			fprintf_unfiltered (gdb_stdlog, "stm8_frame_cache: PC OK\n");
+
+			frame_sp =  value_as_long(trad_frame_get_prev_register (this_frame, cache->saved_regs, STM8_SP_REGNUM));
+			fprintf_unfiltered (gdb_stdlog, "stm8_frame_cache: SP OK\n");
+
+			frame_pc = frame_pc >> 16;
+			fprintf_unfiltered (gdb_stdlog, "stm8_frame_cache: (this_frame=%p) pc=%8.8lx *pc=%8.8lx\n", this_frame, (unsigned long)cache->saved_regs[STM8_PC_REGNUM].addr(), (unsigned long)frame_pc);
+			fprintf_unfiltered (gdb_stdlog, "stm8_frame_cache: (this_frame=%p) sp=%8.8lx *sp=%8.8lx\n", this_frame, (unsigned long)cache->saved_regs[STM8_SP_REGNUM].addr(), (unsigned long)frame_sp);
+		}
+	}
 	return (struct stm8_frame_cache *) (*this_cache);
 }
 
 /* Given a GDB frame, determine the address of the calling function's
    frame.  This will be used to create a new GDB frame struct.  */
 static void
-stm8_frame_this_id (struct frame_info *next_frame, void **this_cache,
+stm8_frame_this_id (struct frame_info *this_frame, void **this_cache,
 		struct frame_id *this_id)
 {
+	if (stm8_debug)
+		fprintf_unfiltered (gdb_stdlog, "stm8_frame_this_id called (this_frame=%p)\n", this_frame);
+
 	struct stm8_frame_cache *cache =
-			stm8_frame_cache (next_frame, this_cache);
+			stm8_frame_cache (this_frame, this_cache);
 	CORE_ADDR func;
 	CORE_ADDR base;
 
-	func = get_frame_func (next_frame);
+	func = get_frame_func (this_frame);
 	base = cache->base;
 
 	/* This marks the outermost frame.  */
@@ -782,6 +885,9 @@
 stm8_frame_prev_register (struct frame_info *this_frame,
 		void **this_cache, int regnum)
 {
+	if (stm8_debug)
+		fprintf_unfiltered (gdb_stdlog, "stm8_frame_prev_register called (this_frame=%p)\n", this_frame);
+
 	struct value *value;
 	struct stm8_frame_cache *info = stm8_frame_cache (this_frame,
 			this_cache);
@@ -803,13 +909,13 @@
 	len = TYPE_LENGTH (type);
 
 	if (len == 1)
-		regcache_raw_write_part (regcache, STM8_A_REGNUM, 0, 1, valbuf);
+		regcache->raw_write_part (STM8_A_REGNUM, 0, 1, valbuf);
 	else if (len == 2)
-		regcache_raw_write_part (regcache, STM8_X_REGNUM, 0, 2, valbuf);
+		regcache->raw_write_part (STM8_X_REGNUM, 0, 2, valbuf);
 	else if (len == 4)
 	{
-		regcache_raw_write_part (regcache, STM8_X_REGNUM, 0, 2, valbuf+2);
-		regcache_raw_write_part (regcache, STM8_Y_REGNUM, 0, 2, valbuf);
+		regcache->raw_write_part (STM8_X_REGNUM, 0, 2, valbuf+2);
+		regcache->raw_write_part (STM8_Y_REGNUM, 0, 2, valbuf);
 	}
 	else
 		error (_("return of value > 4 is not supported."));
@@ -827,19 +933,19 @@
 	switch (TYPE_LENGTH (type))
 	{
 	case 1:
-		regcache_raw_read (regcache, STM8_A_REGNUM, buf);
+		regcache->raw_read (STM8_A_REGNUM, buf);
 		memcpy (valbuf, buf, 1);
 		break;
 
 	case 2:
-		regcache_raw_read (regcache, STM8_X_REGNUM, buf);
+		regcache->raw_read (STM8_X_REGNUM, buf);
 		memcpy (valbuf, buf, 2);
 		break;
 
 	case 4:
-		regcache_raw_read (regcache, STM8_X_REGNUM, buf);
+		regcache->raw_read (STM8_X_REGNUM, buf);
 		memcpy ((char*) valbuf + 2, buf, 2);
-		regcache_raw_read (regcache, STM8_Y_REGNUM, buf);
+		regcache->raw_read (STM8_Y_REGNUM, buf);
 		memcpy (valbuf, buf, 2);
 		break;
 
@@ -853,9 +959,9 @@
 		struct type *valtype, struct regcache *regcache,
 		gdb_byte *readbuf, const gdb_byte *writebuf)
 {
-	if (TYPE_CODE (valtype) == TYPE_CODE_STRUCT
-			|| TYPE_CODE (valtype) == TYPE_CODE_UNION
-			|| TYPE_CODE (valtype) == TYPE_CODE_ARRAY
+	if (valtype->code () == TYPE_CODE_STRUCT
+			|| valtype->code () == TYPE_CODE_UNION
+			|| valtype->code () == TYPE_CODE_ARRAY
 			|| TYPE_LENGTH (valtype) > 4)
 		return RETURN_VALUE_STRUCT_CONVENTION;
 	else
@@ -869,6 +975,7 @@
 }
 
 static const struct frame_unwind stm8_frame_unwind = {
+		"stm8",
 		NORMAL_FRAME,
 		default_frame_unwind_stop_reason,
 		stm8_frame_this_id,
@@ -877,89 +984,21 @@
 		default_frame_sniffer
 };
 
-//static CORE_ADDR
-//stm8_frame_base_address (struct frame_info *next_frame,
-//		void **this_cache)
-//{
-//	struct stm8_frame_cache *cache =
-//			stm8_frame_cache (next_frame, this_cache);
-//
-//	if (stm8_debug)
-//		fprintf_unfiltered (gdb_stdlog, "stm8_frame_base_address: fb=%8.8lx\n", (unsigned long)cache->base);
-//
-//	return cache->base;
-//}
-
-//static CORE_ADDR
-//stm8_frame_args_address (struct frame_info *this_frame, void **this_cache)
-//{
-//	CORE_ADDR addr;
-//	struct stm8_frame_cache *info
-//	= stm8_frame_cache (this_frame, this_cache);
-//
-//	addr = info->base;
-//	if (info->return_kind == RETURN_IRET)
-//		addr += 12; //2 bytes fp + 9 bytes regs + 1
-//	else if (info->return_kind == RETURN_RETF)
-//		addr += 6; //2 bytes fp + 3 bytes pc + 1
-//	else
-//		addr += 5; //2 bytes fp + 2 bytes pc + 1
-//
-//	if (stm8_debug)
-//		fprintf_unfiltered (gdb_stdlog, "stm8_frame_args_address: addr = %8.8lx\n", (unsigned long)addr);
-//
-//	return addr;
-//}
-
-//static const struct frame_base stm8_frame_base =
-//{
-//		&stm8_frame_unwind,
-//		stm8_frame_base_address,
-//		stm8_frame_base_address,
-//		stm8_frame_args_address
-//};
-//
-//static const struct frame_base *
-//stm8_frame_base_sniffer (struct frame_info *this_frame)
-//{
-//	return &stm8_frame_base;
-//}
-
-struct target_desc *tdesc_stm8;
-static void
-initialize_tdesc_stm8 (void)
-{
-	struct target_desc *result = allocate_target_description ();
-	struct tdesc_feature *feature;
-
-	feature = tdesc_create_feature (result, "org.gnu.gdb.stm8.core");
-	tdesc_create_reg (feature, "pc", 0, 1, "general", 32, "uint32");
-	tdesc_create_reg (feature, "a", 1, 1, "general", 8, "uint8");
-	tdesc_create_reg (feature, "x", 2, 1, "general", 16, "uint16");
-	tdesc_create_reg (feature, "y", 3, 1, "general", 16, "uint16");
-	tdesc_create_reg (feature, "sp", 4, 1, "general", 16, "uint16");
-	tdesc_create_reg (feature, "cc", 5, 1, "general", 8, "uint8");
-
-	tdesc_stm8 = result;
-}
-
-
 /* Initialize the gdbarch structure for the STM8.  */
 
 static struct gdbarch *
 stm8_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)
 {
+  stm8_gdbarch_tdep *tdep;
   struct gdbarch *gdbarch;
-  struct gdbarch_tdep *tdep;
-  struct gdbarch_list *best_arch;
-  struct tdesc_arch_data *tdesc_data = NULL;
+  tdesc_arch_data_up tdesc_data = NULL;
   const struct target_desc *tdesc = info.target_desc = 0; //override target desc if any
 
   /* If there is already a candidate, use it.  */
   arches = gdbarch_list_lookup_by_info (arches, &info);
   if (arches != NULL)
   {
-	  tdep = gdbarch_tdep (arches->gdbarch);
+	  tdep = (stm8_gdbarch_tdep *) gdbarch_tdep (arches->gdbarch);
 	  stm8_initialize_soft_register_info(tdep);
 	  return arches->gdbarch;
   }
@@ -971,7 +1010,6 @@
     {
       const struct tdesc_feature *feature;
       int valid_p;
-      int i;
 
       feature = tdesc_find_feature (tdesc,
 				    "org.gnu.gdb.stm8.core");
@@ -981,27 +1019,26 @@
 
       valid_p = 1;
       for (int i = 0; i < STM8_NUM_REGS; i++)
-        valid_p &= tdesc_numbered_register (feature, tdesc_data, i,
+        valid_p &= tdesc_numbered_register (feature, tdesc_data.get (), i,
         		stm8_register_names[i]);
       if (!valid_p)
-        {
-          tdesc_data_cleanup (tdesc_data);
           return NULL;
-        }
     }
 
   /* None found, create a new architecture from the information provided.  */
-  tdep = XNEW (struct gdbarch_tdep);
+  tdep = new stm8_gdbarch_tdep;
   gdbarch = gdbarch_alloc (&info, tdep);
 
   /* Initialize soft registers */
   stm8_initialize_soft_register_info(tdep);
 
   set_gdbarch_num_regs (gdbarch, STM8_NUM_REGS);
+  #if 0
   set_gdbarch_register_name (gdbarch, stm8_register_name);
   set_gdbarch_register_type (gdbarch, stm8_register_type);
-  set_tdesc_pseudo_register_type (gdbarch, stm8_register_type);
-  set_tdesc_pseudo_register_name (gdbarch, stm8_register_name);
+  #endif
+  set_tdesc_pseudo_register_type (gdbarch, stm8_pseudo_register_type);
+  set_tdesc_pseudo_register_name (gdbarch, stm8_pseudo_register_name);
 
   set_gdbarch_num_pseudo_regs (gdbarch, STM8_NUM_PSEUDOREGS);
   set_gdbarch_pseudo_register_read (gdbarch, stm8_pseudo_register_read);
@@ -1015,8 +1052,8 @@
   set_gdbarch_pc_regnum (gdbarch, STM8_PC_REGNUM);
   set_gdbarch_ps_regnum (gdbarch, STM8_CC_REGNUM);
 
-  //set_gdbarch_ptr_bit (gdbarch, 2 * TARGET_CHAR_BIT);
-  //set_gdbarch_addr_bit (gdbarch, 3 * TARGET_CHAR_BIT);
+  set_gdbarch_ptr_bit (gdbarch, 2 * TARGET_CHAR_BIT);
+  set_gdbarch_addr_bit (gdbarch, 4 * TARGET_CHAR_BIT);
 
   /* Map Dwarf2 registers to GDB registers.  */
   set_gdbarch_dwarf2_reg_to_regnum (gdbarch, stm8_dwarf2_reg_to_regnum);
@@ -1038,12 +1075,13 @@
 
   //set_gdbarch_frame_args_skip (gdbarch, 8);
 
-  set_gdbarch_print_insn (gdbarch, print_insn_stm8);
-
-  set_gdbarch_write_pc (gdbarch, stm8_write_pc);
+  //set_gdbarch_print_insn (gdbarch, print_insn_stm8);
 
   set_gdbarch_unwind_pc (gdbarch, stm8_unwind_pc);
+#if 0
+  set_gdbarch_write_pc (gdbarch, stm8_write_pc);
   set_gdbarch_unwind_sp (gdbarch, stm8_unwind_sp);
+#endif
   ////set_gdbarch_dummy_id (gdbarch, stm8_dummy_id);
 
   ////frame_base_set_default (gdbarch, &stm8_frame_base);
@@ -1053,6 +1091,7 @@
 
   //dwarf2 cfi unwinder
   //dwarf2_frame_set_init_reg (gdbarch, stm8_dwarf2_frame_init_reg);
+  set_gdbarch_dwarf2_addr_size (gdbarch, 4);
 
   dwarf2_append_unwinders (gdbarch);
   frame_unwind_append_unwinder (gdbarch, &stm8_frame_unwind);
@@ -1064,9 +1103,10 @@
 //
   tdep->void_type = arch_type (gdbarch, TYPE_CODE_VOID, TARGET_CHAR_BIT, "void");
   tdep->func_void_type = make_function_type (tdep->void_type, NULL);
-  tdep->pc_type = arch_type (gdbarch, TYPE_CODE_PTR, 2*TARGET_CHAR_BIT, NULL);
-  TYPE_TARGET_TYPE (tdep->pc_type) = tdep->func_void_type;
-  TYPE_UNSIGNED (tdep->pc_type) = 1;
+  tdep->pc_type = arch_pointer_type (gdbarch,
+  				     2*TARGET_CHAR_BIT,
+				     NULL, tdep->func_void_type);
+  tdep->pc_type->set_is_unsigned (true);
 
 //  set_gdbarch_short_bit (gdbarch, 2 * TARGET_CHAR_BIT);
 //  set_gdbarch_int_bit (gdbarch, 2 * TARGET_CHAR_BIT);
@@ -1099,7 +1139,7 @@
 //
 
   if (tdesc_data != NULL)
-    tdesc_use_registers (gdbarch, tdesc, tdesc_data);
+    tdesc_use_registers (gdbarch, tdesc, std::move (tdesc_data));
 
   return gdbarch;
 }
@@ -1111,10 +1151,10 @@
 	fprintf_filtered (file, _("stm8 debugging is %s.\n"), value);
 }
 
-extern initialize_file_ftype _initialize_stm8_tdep; /* -Wmissing-prototypes */
+extern initialize_file_ftype _initialize_stm8_tdep;
 
 void
-_initialize_stm8_tdep (void)
+_initialize_stm8_tdep ()
 {
 	stm8_debug = 0;
 	register_gdbarch_init (bfd_arch_stm8, stm8_gdbarch_init);
Index: gdb-12.1/gdb/features/stm8.xml
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gdb-12.1/gdb/features/stm8.xml	2023-04-27 13:22:34.840220271 +0200
@@ -0,0 +1,12 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2020-2022 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE target SYSTEM "gdb-target.dtd">
+<target>
+  <architecture>stm8</architecture>
+  <xi:include href="stm8-core.xml"/>
+</target>
Index: gdb-12.1/gdb/features/Makefile
===================================================================
--- gdb-12.1.orig/gdb/features/Makefile	2022-05-01 20:46:31.000000000 +0200
+++ gdb-12.1/gdb/features/Makefile	2023-04-27 13:22:34.841220285 +0200
@@ -164,7 +164,8 @@
 	s390x-vx-linux64.xml \
 	s390-gs-linux64.xml \
 	s390x-gs-linux64.xml \
-	z80.xml
+	z80.xml \
+	stm8.xml
 
 TDESC_CFILES = $(patsubst %.xml,%.c,$(XMLTOC))
 GDB = false
Index: gdb-12.1/gdb/features/stm8.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gdb-12.1/gdb/features/stm8.c	2023-04-30 18:09:12.890966037 +0200
@@ -0,0 +1,36 @@
+/* THIS FILE IS GENERATED.  -*- buffer-read-only: t -*- vi:set ro:
+  Original: stm8.xml */
+
+#include "defs.h"
+#include "osabi.h"
+#include "target-descriptions.h"
+
+struct target_desc *tdesc_stm8;
+static void
+initialize_tdesc_stm8 (void)
+{
+  target_desc_up result = allocate_target_description ();
+  set_tdesc_architecture (result.get (), bfd_scan_arch ("stm8"));
+
+  struct tdesc_feature *feature;
+
+  feature = tdesc_create_feature (result.get (), "org.gnu.gdb.stm8.core");
+  tdesc_type_with_fields *type_with_fields;
+  type_with_fields = tdesc_create_flags (feature, "cc_flags", 1);
+  tdesc_add_flag (type_with_fields, 0, "C");
+  tdesc_add_flag (type_with_fields, 1, "Z");
+  tdesc_add_flag (type_with_fields, 2, "N");
+  tdesc_add_flag (type_with_fields, 3, "I0");
+  tdesc_add_flag (type_with_fields, 4, "H");
+  tdesc_add_flag (type_with_fields, 5, "I1");
+  tdesc_add_flag (type_with_fields, 7, "V");
+
+  tdesc_create_reg (feature, "pc", 0, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "a", 1, 1, NULL,  8, "uint8");
+  tdesc_create_reg (feature, "x", 2, 1, NULL, 16, "uint16");
+  tdesc_create_reg (feature, "y", 3, 1, NULL, 16, "uint16");
+  tdesc_create_reg (feature, "sp", 4, 1, NULL, 16, "uint16");
+  tdesc_create_reg (feature, "cc", 5, 1, NULL, 8, "cc_flags");
+
+  tdesc_stm8 = result.release ();
+}
Index: gdb-12.1/bfd/cpu-stm8.c
===================================================================
--- gdb-12.1.orig/bfd/cpu-stm8.c	2023-04-27 13:21:38.335429046 +0200
+++ gdb-12.1/bfd/cpu-stm8.c	2023-04-27 13:22:34.841220285 +0200
@@ -37,5 +37,6 @@
   bfd_default_compatible,       /* architecture comparison fn */
   bfd_default_scan,             /* string to architecture convert fn */
   bfd_arch_default_fill,
+  NULL,
   0,
 };
Index: gdb-12.1/bfd/elf32-stm8.c
===================================================================
--- gdb-12.1.orig/bfd/elf32-stm8.c	2023-04-27 13:21:38.365429467 +0200
+++ gdb-12.1/bfd/elf32-stm8.c	2023-04-27 13:22:34.842220299 +0200
@@ -197,7 +197,11 @@
                asection *input_section ATTRIBUTE_UNUSED,
                bfd *output_bfd,
                char **error_message ATTRIBUTE_UNUSED)
- {
+{
+#if 1
+    fprintf(stderr,"bfd_elf_stm8_spec_reloc:\n");
+#endif
+
   if (output_bfd != NULL
       && (symbol->flags & BSF_SECTION_SYM) == 0
       && (! reloc_entry->howto->partial_inplace
@@ -216,20 +220,37 @@
 static reloc_howto_type *
 elf32_stm8_howto_from_type (unsigned int r_type)
 {
+#if 1
+    fprintf(stderr,"elf32_stm8_howto_from_type:\n");
+#endif
+
   if (r_type < ARRAY_SIZE (elf32_stm8_howto_table_1))
     return &elf32_stm8_howto_table_1[r_type];
 
   return NULL;
 }
 
-static void
+static bool
 elf32_stm8_info_to_howto (bfd * abfd ATTRIBUTE_UNUSED, arelent * bfd_reloc,
                          Elf_Internal_Rela * elf_reloc)
 {
   unsigned int r_type;
 
+#if 1
+    fprintf(stderr,"elf32_stm8_info_to_howto:\n");
+#endif
+
   r_type = ELF32_R_TYPE (elf_reloc->r_info);
-  bfd_reloc->howto = elf32_stm8_howto_from_type (r_type);
+
+  reloc_howto_type *howto = elf32_stm8_howto_from_type (r_type);
+  if (howto != NULL) {
+
+    bfd_reloc->howto = howto;
+    return true;
+  } else {
+    bfd_set_error (bfd_error_bad_value);
+    return false;
+  }
 }
 
 struct elf32_stm8_reloc_map
@@ -258,6 +279,10 @@
 {
   unsigned int i;
 
+#if 1
+    fprintf(stderr,"elf32_stm8_reloc_type_lookup:\n");
+#endif
+
   for (i = 0; i < ARRAY_SIZE (elf32_stm8_reloc_map); i ++)
     if (elf32_stm8_reloc_map[i].bfd_reloc_val == code)
       return elf32_stm8_howto_from_type (elf32_stm8_reloc_map[i].elf_reloc_val);
@@ -271,6 +296,10 @@
 {
   unsigned int i;
 
+#if 1
+    fprintf(stderr,"elf32_stm8_reloc_name_lookup:\n");
+#endif
+
   for (i = 0; i < ARRAY_SIZE (elf32_stm8_howto_table_1); i++)
     if (elf32_stm8_howto_table_1[i].name != NULL
         && strcasecmp (elf32_stm8_howto_table_1[i].name, r_name) == 0)
@@ -279,6 +308,7 @@
   return NULL;
 }
 
+#if 0
 static void
 elf32_stm8_post_process_headers (bfd *abfd,
                  struct bfd_link_info *info ATTRIBUTE_UNUSED)
@@ -289,12 +319,16 @@
 //  i_ehdrp->e_ident[EI_OSABI] = get_elf_backend_data (abfd)->elf_osabi;
   i_ehdrp->e_ident[EI_ABIVERSION] = 0;
 }
+#endif
 
 static bool
 elf32_stm8_modify_segment_map (bfd *abfd,
             struct bfd_link_info *info ATTRIBUTE_UNUSED)
 {
   struct elf_segment_map *m;
+#if 1
+    fprintf(stderr,"elf32_stm8_modify_segment_map:\n");
+#endif
   return true;
   m = elf_seg_map (abfd);
   while (m)
@@ -306,7 +340,7 @@
   return true;
 }
 
-static bool
+static int
 elf32_stm8_relocate_section (bfd *output_bfd ATTRIBUTE_UNUSED,
                 struct bfd_link_info *info,
                 bfd *input_bfd,
@@ -321,6 +355,10 @@
   Elf_Internal_Rela *rel;
   Elf_Internal_Rela *relend;
 
+#if 0
+    fprintf(stderr,"elf32_stm8_relocate_section:\n");
+#endif
+
   symtab_hdr = & elf_tdata (input_bfd)->symtab_hdr;
   sym_hashes = elf_sym_hashes (input_bfd);
   relend     = relocs + input_section->reloc_count;
Index: gdb-12.1/opcodes/stm8-dis.c
===================================================================
--- gdb-12.1.orig/opcodes/stm8-dis.c	2023-04-27 13:21:38.549432043 +0200
+++ gdb-12.1/opcodes/stm8-dis.c	2023-04-27 13:22:34.842220299 +0200
@@ -37,7 +37,7 @@
 int stm8_dis(bfd_vma addr, unsigned int op);
 int stm8_operands(char *s, unsigned char buf[], stm8_addr_mode_t arg);
 const char* find_symbol(unsigned int addr);
-int find_symbol_x(bfd_vma addr);
+//int find_symbol_x(bfd_vma addr);
 
 
 static int
@@ -49,10 +49,10 @@
   return r;
 }
 
-int find_symbol_x(bfd_vma addr)
-{
-	return dinfo->symbol_at_address_func(addr,dinfo);
-}
+//int find_symbol_x(bfd_vma addr)
+//{
+//	return dinfo->symbol_at_address_func(addr,dinfo);
+//}
 
 const char* find_symbol(unsigned int addr)
 {
Index: gdb-12.1/gdb/features/stm8-core.xml
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gdb-12.1/gdb/features/stm8-core.xml	2023-04-30 18:08:23.682258967 +0200
@@ -0,0 +1,26 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2020-2022 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.stm8.core">
+  <flags id="cc_flags" size="1">
+    <field name="C" start="0" end="0"/>
+    <field name="Z" start="1" end="1"/>
+    <field name="N" start="2" end="2"/>
+    <field name="I0" start="3" end="3"/>
+    <field name="H" start="4" end="4"/>
+    <field name="I1" start="5" end="5"/>
+<!-- Bit 6 reserved -->
+    <field name="V" start="7" end="7"/>
+  </flags>
+  <reg name="pc" bitsize="32" type="uint32" />
+  <reg name="a" bitsize="8" type="uint8"/>
+  <reg name="x" bitsize="16" type="uint16"/>
+  <reg name="y" bitsize="16" type="uint16"/>
+  <reg name="sp" bitsize="16" type="uint16"/>
+  <reg name="cc" bitsize="8" type="cc_flags"/>
+</feature>
